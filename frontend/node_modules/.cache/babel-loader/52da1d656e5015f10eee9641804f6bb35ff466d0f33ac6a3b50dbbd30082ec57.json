{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import \"./accountsettings.css\"\n// import defaultprofilepic from \"../../assets/defaultPfP.png\";\n// import axios from 'axios';\n\n// const AccountSettings = () => {\n//   const [formData, setFormData] = useState({\n//     first_name: \"\", \n//     last_name: \"\",\n//     phone_number: \"\",\n//     email: \"\",\n//     classification: \"\", //courses: \"\", // might need to handle this differently if it's an array on the backend\n//     //profile_image: null, // For file upload\n//     description: \"\",\n//     username: \"\", // might add this later\n//     password: \"\"\n//   });\n\n//   const token = localStorage.getItem('authToken'); //where I'm storing the token that the user was assigned at sign up\n//   const baseURL = 'http://localhost:10000/api';\n\n//   useEffect(() => {\n\n//     const storedData = localStorage.getItem('accountSettingsData');\n//     if (storedData) {\n//       setFormData(JSON.parse(storedData));\n//     } else {\n//       // If no data in local storage, fetch from the server\n//       const fetchUserSettings = async () => { //grabbing the users previous account settings\n//         if (!token) { //if the user does not have a token/user id\n//           console.log(\"Token not found\");\n//           return;\n//         }\n//         else {\n//           console.log(\"Token found:\", token);\n//         }\n\n//         try {\n//           const response = await axios.get(`${baseURL}/accountsettings`, { //\n//             headers: {\n//               Authorization: `Bearer ${token}`,\n//             },\n//           });\n//           console.log(\"Posted to database:\", response.data);\n//           setFormData((prevData) => ({\n//             ...prevData,\n//             first_name: response.data.first_name || \"\",\n//             last_name: response.data.last_name || \"\",\n//             phone_number: response.data.phone_number || \"\",\n//             email: response.data.email || \"\",\n//             classification: response.data.classification || \"\",\n//             //courses: response.data.courses || \"\", // Adjust if backend sends courses as an array\n//             description: response.data.description || \"\", // Assuming 'description' in backend is bio\n//             //profile_image: response.data.profile_image || null, // Set existing profile image URL\n//             username: response.data.username || \"\",\n//             password: response.data.password || \"\"\n//           }));\n\n//         } catch (error) {\n//           console.error(\"Error fetching account settings:\", error);\n//         }\n//       };\n//     fetchUserSettings();\n//     }\n//   }, [token, baseURL]);\n\n//   // Save formData to local storage whenever it changes\n//   useEffect(() => {\n//     localStorage.setItem('accountSettingsData', JSON.stringify(formData));\n//   }, [formData]);\n\n//   // Handle Input Changes\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//     //console.log(\"formData after change:\", formData); \n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!token) {\n//       console.log(\"Token not found\");\n//       return;\n//     }\n//     else {\n//       console.log(\"Token found:\", token);\n//     }\n\n//     const formDataToSend = new FormData();\n//     for (const key in formData) {\n//       formDataToSend.append(key, formData[key]);\n//     }\n//     console.log(\"formData being sent:\", formData);\n\n//     try {\n//       const response = await axios.put(`${baseURL}/accountsettings`, formData, {\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           'Content-Type': 'multipart/form-data',\n//         },\n//       }\n//       );\n//       console.log(\"Account settings updated successfully:\", response.data);\n//       // localStorage.removeItem('accountSettingsData');\n//     } catch (error) {\n//       console.error(\"Error updating account settings:\", error);\n//     }\n//   };\n\n//   // const handleImageChange = (event) => {\n//   //   console.log(\"file to upload:\", event.target.files[0]);\n//   //   const file = event.target.files[0];\n//   //   if (file) {\n//   //     const reader = new FileReader();\n//   //     reader.onloadend = () => {\n//   //       setFormData({ ...formData, profile_image: reader.result }); // Store as binary data\n//   //     };\n//   //     reader.readAsArrayBuffer(file);\n//   //     //reader.readAsBinaryString(file); // Or reader.readAsArrayBuffer(file)\n//   //   } else {\n//   //     setFormData({ ...formData, profile_image: null });\n//   //   }\n//   // };\n\n//   return (\n//     <article className=\"settingsContainer\">\n//       <h1 id=\"astitle\">Account Settings</h1>\n\n//       <form onSubmit={handleSubmit} className=\"settingsInfo\">\n//         <div className=\"mainInfo\">\n//           <div className=\"entryarea\">\n//             <span>First Name</span>\n//             <input type=\"text\" name=\"first_name\" value={formData.first_name} onChange={handleChange} required />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Last Name</span>\n//             <input type=\"text\" name=\"last_name\" value={formData.last_name} onChange={handleChange} required />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Phone Number</span>\n//             <input type=\"text\" name=\"phone_number\" value={formData.phone_number} onChange={handleChange} />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Email</span>\n//             <input type=\"text\" name=\"email\" value={formData.email} onChange={handleChange} required />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Courses</span>\n//             <input type=\"text\" name=\"courses\" value={formData.courses} onChange={handleChange} />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Classification</span>\n//             <input type=\"text\" name=\"classification\" value={formData.classification} onChange={handleChange} required />\n//           </div>\n\n//         </div>\n\n//         <div className=\"otherInfo\">\n//           <div className=\"entryarea\">\n//             <span className=\"aspfpSpan\">Edit Profile Picture</span>\n\n//               <input \n//                 type=\"file\"\n//                 name=\"profile_image\"\n//                 accept= \".jpeg, .png, .jpg\"  //\"image/*\" //accept=\".jpeg, .png\"\n//                 //onChange={handleImageChange}\n//                 className=\"asProfileUpload\" \n//                 id=\"profilePicUpload\"\n//               />\n\n//               <label htmlFor=\"profilePicUpload\">\n//                   <div className=\"asProfilePic\">\n//                     <img \n//                     src={/*formData.profile_image ||*/ defaultprofilepic} //{profileImage || defaultprofilepic} \n//                     alt=\"Profile\" \n//                     className=\"asprofile-image\" />\n//                   </div>\n//               </label>\n\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Bio</span>\n//             <input type=\"text\" name=\"description\" placeholder=\"Tell us about you! What are your interests, activities, favorites?\" value={formData.description} onChange={handleChange} required />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Username</span>\n//             <input type=\"text\" name=\"username\" value={formData.username} onChange={handleChange} required />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Password</span>\n//             <input type=\"text\" name=\"password\" value={formData.password} onChange={handleChange} required />\n//           </div>\n\n//         </div>\n\n//         <div id=\"sEButton\">\n//           <button type=\"submit\" id=\"saveEdits\">\n//             Save Edits\n//           </button>\n//         </div>\n//       </form>\n//     </article>\n//   );\n// };\n\n// /* Add in autocomplete for courses and classification */\n\n// export default AccountSettings;\n\n//   // Load the saved profile picture from localStorage when the component mounts\n//   // useEffect(() => {\n//   //   const savedImage = localStorage.getItem('profilePic');\n//   //   if (savedImage) {\n//   //     setImage(savedImage); // If there's a saved image, set it to state\n//   //   }\n//   // }, []);\n\n//   // const handleImageChange = (e) => {\n//   //   const file = e.target.files[0];\n//   //   if (file) {\n//   //     setFormData((prevData) => ({\n//   //       ...prevData,\n//   //       profileImage: file\n//   //     }));\n//   //     // const imageUrl = URL.createObjectURL(file); // Create a temporary URL for the image\n//   //     // localStorage.setItem('profilePic', imageUrl); // Store the image URL in localStorage\n//   //   }\n//   // };","map":{"version":3,"names":[],"sources":["/Users/hesanders23/Desktop/Study-Buddy-Web-App/frontend/src/pages/accountsettings/accountsettings.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import \"./accountsettings.css\"\n// import defaultprofilepic from \"../../assets/defaultPfP.png\";\n// import axios from 'axios';\n\n// const AccountSettings = () => {\n//   const [formData, setFormData] = useState({\n//     first_name: \"\", \n//     last_name: \"\",\n//     phone_number: \"\",\n//     email: \"\",\n//     classification: \"\", //courses: \"\", // might need to handle this differently if it's an array on the backend\n//     //profile_image: null, // For file upload\n//     description: \"\",\n//     username: \"\", // might add this later\n//     password: \"\"\n//   });\n\n//   const token = localStorage.getItem('authToken'); //where I'm storing the token that the user was assigned at sign up\n//   const baseURL = 'http://localhost:10000/api';\n\n\n//   useEffect(() => {\n    \n//     const storedData = localStorage.getItem('accountSettingsData');\n//     if (storedData) {\n//       setFormData(JSON.parse(storedData));\n//     } else {\n//       // If no data in local storage, fetch from the server\n//       const fetchUserSettings = async () => { //grabbing the users previous account settings\n//         if (!token) { //if the user does not have a token/user id\n//           console.log(\"Token not found\");\n//           return;\n//         }\n//         else {\n//           console.log(\"Token found:\", token);\n//         }\n\n//         try {\n//           const response = await axios.get(`${baseURL}/accountsettings`, { //\n//             headers: {\n//               Authorization: `Bearer ${token}`,\n//             },\n//           });\n//           console.log(\"Posted to database:\", response.data);\n//           setFormData((prevData) => ({\n//             ...prevData,\n//             first_name: response.data.first_name || \"\",\n//             last_name: response.data.last_name || \"\",\n//             phone_number: response.data.phone_number || \"\",\n//             email: response.data.email || \"\",\n//             classification: response.data.classification || \"\",\n//             //courses: response.data.courses || \"\", // Adjust if backend sends courses as an array\n//             description: response.data.description || \"\", // Assuming 'description' in backend is bio\n//             //profile_image: response.data.profile_image || null, // Set existing profile image URL\n//             username: response.data.username || \"\",\n//             password: response.data.password || \"\"\n//           }));\n\n//         } catch (error) {\n//           console.error(\"Error fetching account settings:\", error);\n//         }\n//       };\n//     fetchUserSettings();\n//     }\n//   }, [token, baseURL]);\n\n//   // Save formData to local storage whenever it changes\n//   useEffect(() => {\n//     localStorage.setItem('accountSettingsData', JSON.stringify(formData));\n//   }, [formData]);\n\n\n//   // Handle Input Changes\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//     //console.log(\"formData after change:\", formData); \n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!token) {\n//       console.log(\"Token not found\");\n//       return;\n//     }\n//     else {\n//       console.log(\"Token found:\", token);\n//     }\n\n//     const formDataToSend = new FormData();\n//     for (const key in formData) {\n//       formDataToSend.append(key, formData[key]);\n//     }\n//     console.log(\"formData being sent:\", formData);\n\n//     try {\n//       const response = await axios.put(`${baseURL}/accountsettings`, formData, {\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           'Content-Type': 'multipart/form-data',\n//         },\n//       }\n//       );\n//       console.log(\"Account settings updated successfully:\", response.data);\n//       // localStorage.removeItem('accountSettingsData');\n//     } catch (error) {\n//       console.error(\"Error updating account settings:\", error);\n//     }\n//   };\n\n//   // const handleImageChange = (event) => {\n//   //   console.log(\"file to upload:\", event.target.files[0]);\n//   //   const file = event.target.files[0];\n//   //   if (file) {\n//   //     const reader = new FileReader();\n//   //     reader.onloadend = () => {\n//   //       setFormData({ ...formData, profile_image: reader.result }); // Store as binary data\n//   //     };\n//   //     reader.readAsArrayBuffer(file);\n//   //     //reader.readAsBinaryString(file); // Or reader.readAsArrayBuffer(file)\n//   //   } else {\n//   //     setFormData({ ...formData, profile_image: null });\n//   //   }\n//   // };\n\n\n//   return (\n//     <article className=\"settingsContainer\">\n//       <h1 id=\"astitle\">Account Settings</h1>\n\n//       <form onSubmit={handleSubmit} className=\"settingsInfo\">\n//         <div className=\"mainInfo\">\n//           <div className=\"entryarea\">\n//             <span>First Name</span>\n//             <input type=\"text\" name=\"first_name\" value={formData.first_name} onChange={handleChange} required />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Last Name</span>\n//             <input type=\"text\" name=\"last_name\" value={formData.last_name} onChange={handleChange} required />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Phone Number</span>\n//             <input type=\"text\" name=\"phone_number\" value={formData.phone_number} onChange={handleChange} />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Email</span>\n//             <input type=\"text\" name=\"email\" value={formData.email} onChange={handleChange} required />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Courses</span>\n//             <input type=\"text\" name=\"courses\" value={formData.courses} onChange={handleChange} />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Classification</span>\n//             <input type=\"text\" name=\"classification\" value={formData.classification} onChange={handleChange} required />\n//           </div>\n\n//         </div>\n\n//         <div className=\"otherInfo\">\n//           <div className=\"entryarea\">\n//             <span className=\"aspfpSpan\">Edit Profile Picture</span>\n\n//               <input \n//                 type=\"file\"\n//                 name=\"profile_image\"\n//                 accept= \".jpeg, .png, .jpg\"  //\"image/*\" //accept=\".jpeg, .png\"\n//                 //onChange={handleImageChange}\n//                 className=\"asProfileUpload\" \n//                 id=\"profilePicUpload\"\n//               />\n\n//               <label htmlFor=\"profilePicUpload\">\n//                   <div className=\"asProfilePic\">\n//                     <img \n//                     src={/*formData.profile_image ||*/ defaultprofilepic} //{profileImage || defaultprofilepic} \n//                     alt=\"Profile\" \n//                     className=\"asprofile-image\" />\n//                   </div>\n//               </label>\n\n\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Bio</span>\n//             <input type=\"text\" name=\"description\" placeholder=\"Tell us about you! What are your interests, activities, favorites?\" value={formData.description} onChange={handleChange} required />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Username</span>\n//             <input type=\"text\" name=\"username\" value={formData.username} onChange={handleChange} required />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Password</span>\n//             <input type=\"text\" name=\"password\" value={formData.password} onChange={handleChange} required />\n//           </div>\n          \n//         </div>\n\n//         <div id=\"sEButton\">\n//           <button type=\"submit\" id=\"saveEdits\">\n//             Save Edits\n//           </button>\n//         </div>\n//       </form>\n//     </article>\n//   );\n// };\n\n// /* Add in autocomplete for courses and classification */\n\n// export default AccountSettings;\n\n\n//   // Load the saved profile picture from localStorage when the component mounts\n//   // useEffect(() => {\n//   //   const savedImage = localStorage.getItem('profilePic');\n//   //   if (savedImage) {\n//   //     setImage(savedImage); // If there's a saved image, set it to state\n//   //   }\n//   // }, []);\n\n//   // const handleImageChange = (e) => {\n//   //   const file = e.target.files[0];\n//   //   if (file) {\n//   //     setFormData((prevData) => ({\n//   //       ...prevData,\n//   //       profileImage: file\n//   //     }));\n//   //     // const imageUrl = URL.createObjectURL(file); // Create a temporary URL for the image\n//   //     // localStorage.setItem('profilePic', imageUrl); // Store the image URL in localStorage\n//   //   }\n//   // };"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
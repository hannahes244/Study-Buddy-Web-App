{"ast":null,"code":"var _jsxFileName = \"/Users/hesanders23/Desktop/Study-Buddy-Web-App/frontend/src/pages/accountsettings/accountsettings.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./accountsettings.css\";\nimport defaultprofilepic from \"../../assets/defaultPfP.png\"; // Fallback\nimport cat from \"../../assets/acnhpfps/cat.jpeg\";\nimport duck from \"../../assets/acnhpfps/duck.jpeg\";\nimport pig from \"../../assets/acnhpfps/pig.jpeg\";\nimport raccoon from \"../../assets/acnhpfps/raccoon.jpeg\";\nimport raccoonwsunglasses from \"../../assets/acnhpfps/raccoonwsunglasses.jpeg\";\nimport sleepingdog from \"../../assets/acnhpfps/sleepingdog.jpeg\";\nimport tomnook from \"../../assets/acnhpfps/tomnook.jpeg\";\nimport yellowduck from \"../../assets/acnhpfps/yellowduck.jpeg\";\nimport sittingcat from \"../../assets/acnhpfps/sittingcat.jpeg\";\nimport sittingbear from \"../../assets/acnhpfps/sittingbear.jpeg\";\nimport madsquirrel from \"../../assets/acnhpfps/madsquirrel.jpeg\";\nimport goat from \"../../assets/acnhpfps/goat.jpeg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst presetProfilePics = [cat, duck, pig, raccoon, raccoonwsunglasses, sleepingdog, tomnook, yellowduck, goat, sittingcat, sittingbear, madsquirrel];\nconst courseList = [\"Mathematics\", \"Computer Science\", \"Physics\", \"Chemistry\", \"Biology\", \"Engineering\", \"History\", \"Literature\", \"Art\", \"Music\"];\nconst interestList = [\"Reading\", \"Hiking\", \"Gaming\", \"Crochet\", \"Coding\", \"Painting\", \"Photography\", \"Sports\", \"Movies\", \"Music\", \"Travel\"];\nconst AccountSettings = () => {\n  _s();\n  const [formData, setFormData] = useState(() => {\n    const storedSettings = localStorage.getItem('accountSettingsData');\n    const storedUser = localStorage.getItem('currentUser'); // Retrieve signup data\n\n    if (storedSettings) {\n      return JSON.parse(storedSettings);\n    } else if (storedUser) {\n      // If no previous settings, pre-fill with signup data\n      const parsedUser = JSON.parse(storedUser);\n      // Assuming your signup data has these fields: username, first_name, last_name, email\n      return {\n        first_name: parsedUser.first_name || \"\",\n        last_name: parsedUser.last_name || \"\",\n        phonenumber: \"\",\n        // No phone number in signup\n        email: parsedUser.email || \"\",\n        courses: [],\n        // Not collected during signup\n        classification: \"\",\n        // Not collected during signup\n        description: \"\",\n        // Not collected during signup\n        username: parsedUser.username || \"\",\n        password: \"\",\n        // Don't pre-fill password for security\n        profileImageUrl: \"\",\n        // Not collected during signup\n        interests: [] // Not collected during signup\n      };\n    } else {\n      return {\n        first_name: \"\",\n        lastName: \"\",\n        phoneNumber: \"\",\n        email: \"\",\n        courses: [],\n        classification: \"\",\n        description: \"\",\n        username: \"\",\n        password: \"\",\n        profileImageUrl: \"\",\n        interests: []\n      };\n    }\n    // const [formData, setFormData] = useState(() => {\n    //   const storedData = localStorage.getItem('accountSettingsData');\n    //   if (storedData) {\n    //     return JSON.parse(storedData);\n    //   } else {\n    //     return {\n    //       first_name: \"\",\n    //       last_name: \"\",\n    //       phonenumber: \"\",\n    //       email: \"\",\n    //       courses: \"\",\n    //       classification: \"\",\n    //       description: \"\",\n    //       username: \"\",\n    //       password: \"\",\n    //       profileImageUrl: \"\"\n    //     };\n    //   }\n  });\n  useEffect(() => {\n    localStorage.setItem('accountSettingsData', JSON.stringify(formData));\n    window.dispatchEvent(new Event('profilePictureUpdated')); // Dispatch custom event\n  }, [formData.profileImageUrl]);\n  useEffect(() => {\n    localStorage.setItem('accountSettingsData', JSON.stringify(formData));\n  }, [formData]);\n  const handleChange = e => {\n    const {\n      name,\n      value,\n      type,\n      selectedOptions\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n    if (type === 'select-multiple') {\n      const selectedValues = Array.from(selectedOptions).map(option => option.value);\n      setFormData({\n        ...formData,\n        [name]: selectedValues\n      });\n    } else {\n      setFormData({\n        ...formData,\n        [name]: value\n      });\n    }\n  };\n  const handlePresetImageSelect = imageUrl => {\n    setFormData({\n      ...formData,\n      profileImageUrl: imageUrl\n    });\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(\"Account settings saved to local storage:\", formData);\n    alert(\"Account settings saved!\"); // Change to a pop-up alert\n  };\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: \"settingsContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"astitle\",\n      children: \"Account Settings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"settingsInfo\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mainInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"entryarea\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"First Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"first_name\",\n            value: formData.first_name,\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"entryarea\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Last Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"last_name\",\n            value: formData.last_name,\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"entryarea\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Phone Number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"phonenumber\",\n            value: formData.phonenumber,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"entryarea\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"email\",\n            value: formData.email,\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"entryarea\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Courses\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"courses\",\n            multiple: true,\n            value: formData.courses,\n            onChange: handleChange,\n            className: \"multi-select-dropdown\",\n            children: courseList.map(course => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: course,\n              children: course\n            }, course, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"entryarea\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Interests\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"interests\",\n            multiple: true,\n            value: formData.interests,\n            onChange: handleChange,\n            className: \"multi-select-dropdown\",\n            children: interestList.map(interest => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: interest,\n              children: interest\n            }, interest, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"entryarea\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Classification\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"classification\",\n            value: formData.classification,\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"entryarea\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Bio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"description\",\n            placeholder: \"Tell us about you!\",\n            value: formData.description,\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"otherInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"entryarea\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"aspfpSpan\",\n            children: \"Choose Profile Picture\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this), formData.profileImageUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"asProfilePic\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: formData.profileImageUrl || defaultprofilepic,\n              alt: \"Selected Profile\",\n              className: \"asprofile-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"preset-image-options\",\n            children: presetProfilePics.map((imageUrl, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `preset-image-container ${formData.profileImageUrl === imageUrl ? 'selected' : ''}`,\n              onClick: () => handlePresetImageSelect(imageUrl),\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: imageUrl,\n                alt: `Preset Avatar ${index + 1}`,\n                className: \"preset-image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 21\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"entryarea\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"username\",\n            value: formData.username,\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"entryarea\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"password\",\n            value: formData.password,\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"sEButton\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          id: \"saveEdits\",\n          children: \"Save Edits\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(AccountSettings, \"6M4y2EmgxXbY0MBJs33No763PJw=\");\n_c = AccountSettings;\nexport default AccountSettings;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./accountsettings.css\"\n// import defaultprofilepic from \"../../assets/defaultPfP.png\";\n// import axios from 'axios';\n\n// const AccountSettings = () => {\n//   const [formData, setFormData] = useState({\n//     first_name: \"\", \n//     last_name: \"\",\n//     phone_number: \"\",\n//     email: \"\",\n//     classification: \"\", //courses: \"\", // might need to handle this differently if it's an array on the backend\n//     //profile_image: null, // For file upload\n//     description: \"\",\n//     username: \"\", // might add this later\n//     password: \"\"\n//   });\n\n//   const token = localStorage.getItem('authToken'); //where I'm storing the token that the user was assigned at sign up\n//   const baseURL = 'http://localhost:10000/api';\n\n//   useEffect(() => {\n\n//     const storedData = localStorage.getItem('accountSettingsData');\n//     if (storedData) {\n//       setFormData(JSON.parse(storedData));\n//     } else {\n//       // If no data in local storage, fetch from the server\n//       const fetchUserSettings = async () => { //grabbing the users previous account settings\n//         if (!token) { //if the user does not have a token/user id\n//           console.log(\"Token not found\");\n//           return;\n//         }\n//         else {\n//           console.log(\"Token found:\", token);\n//         }\n\n//         try {\n//           const response = await axios.get(`${baseURL}/accountsettings`, { //\n//             headers: {\n//               Authorization: `Bearer ${token}`,\n//             },\n//           });\n//           console.log(\"Posted to database:\", response.data);\n//           setFormData((prevData) => ({\n//             ...prevData,\n//             first_name: response.data.first_name || \"\",\n//             last_name: response.data.last_name || \"\",\n//             phone_number: response.data.phone_number || \"\",\n//             email: response.data.email || \"\",\n//             classification: response.data.classification || \"\",\n//             //courses: response.data.courses || \"\", // Adjust if backend sends courses as an array\n//             description: response.data.description || \"\", // Assuming 'description' in backend is bio\n//             //profile_image: response.data.profile_image || null, // Set existing profile image URL\n//             username: response.data.username || \"\",\n//             password: response.data.password || \"\"\n//           }));\n\n//         } catch (error) {\n//           console.error(\"Error fetching account settings:\", error);\n//         }\n//       };\n//     fetchUserSettings();\n//     }\n//   }, [token, baseURL]);\n\n//   // Save formData to local storage whenever it changes\n//   useEffect(() => {\n//     localStorage.setItem('accountSettingsData', JSON.stringify(formData));\n//   }, [formData]);\n\n//   // Handle Input Changes\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//     //console.log(\"formData after change:\", formData); \n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!token) {\n//       console.log(\"Token not found\");\n//       return;\n//     }\n//     else {\n//       console.log(\"Token found:\", token);\n//     }\n\n//     const formDataToSend = new FormData();\n//     for (const key in formData) {\n//       formDataToSend.append(key, formData[key]);\n//     }\n//     console.log(\"formData being sent:\", formData);\n\n//     try {\n//       const response = await axios.put(`${baseURL}/accountsettings`, formData, {\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           'Content-Type': 'multipart/form-data',\n//         },\n//       }\n//       );\n//       console.log(\"Account settings updated successfully:\", response.data);\n//       // localStorage.removeItem('accountSettingsData');\n//     } catch (error) {\n//       console.error(\"Error updating account settings:\", error);\n//     }\n//   };\n\n//   // const handleImageChange = (event) => {\n//   //   console.log(\"file to upload:\", event.target.files[0]);\n//   //   const file = event.target.files[0];\n//   //   if (file) {\n//   //     const reader = new FileReader();\n//   //     reader.onloadend = () => {\n//   //       setFormData({ ...formData, profile_image: reader.result }); // Store as binary data\n//   //     };\n//   //     reader.readAsArrayBuffer(file);\n//   //     //reader.readAsBinaryString(file); // Or reader.readAsArrayBuffer(file)\n//   //   } else {\n//   //     setFormData({ ...formData, profile_image: null });\n//   //   }\n//   // };\n\n//   return (\n//     <article className=\"settingsContainer\">\n//       <h1 id=\"astitle\">Account Settings</h1>\n\n//       <form onSubmit={handleSubmit} className=\"settingsInfo\">\n//         <div className=\"mainInfo\">\n//           <div className=\"entryarea\">\n//             <span>First Name</span>\n//             <input type=\"text\" name=\"first_name\" value={formData.first_name} onChange={handleChange} required />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Last Name</span>\n//             <input type=\"text\" name=\"last_name\" value={formData.last_name} onChange={handleChange} required />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Phone Number</span>\n//             <input type=\"text\" name=\"phone_number\" value={formData.phone_number} onChange={handleChange} />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Email</span>\n//             <input type=\"text\" name=\"email\" value={formData.email} onChange={handleChange} required />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Courses</span>\n//             <input type=\"text\" name=\"courses\" value={formData.courses} onChange={handleChange} />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Classification</span>\n//             <input type=\"text\" name=\"classification\" value={formData.classification} onChange={handleChange} required />\n//           </div>\n\n//         </div>\n\n//         <div className=\"otherInfo\">\n//           <div className=\"entryarea\">\n//             <span className=\"aspfpSpan\">Edit Profile Picture</span>\n\n//               <input \n//                 type=\"file\"\n//                 name=\"profile_image\"\n//                 accept= \".jpeg, .png, .jpg\"  //\"image/*\" //accept=\".jpeg, .png\"\n//                 //onChange={handleImageChange}\n//                 className=\"asProfileUpload\" \n//                 id=\"profilePicUpload\"\n//               />\n\n//               <label htmlFor=\"profilePicUpload\">\n//                   <div className=\"asProfilePic\">\n//                     <img \n//                     src={/*formData.profile_image ||*/ defaultprofilepic} //{profileImage || defaultprofilepic} \n//                     alt=\"Profile\" \n//                     className=\"asprofile-image\" />\n//                   </div>\n//               </label>\n\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Bio</span>\n//             <input type=\"text\" name=\"description\" placeholder=\"Tell us about you! What are your interests, activities, favorites?\" value={formData.description} onChange={handleChange} required />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Username</span>\n//             <input type=\"text\" name=\"username\" value={formData.username} onChange={handleChange} required />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Password</span>\n//             <input type=\"text\" name=\"password\" value={formData.password} onChange={handleChange} required />\n//           </div>\n\n//         </div>\n\n//         <div id=\"sEButton\">\n//           <button type=\"submit\" id=\"saveEdits\">\n//             Save Edits\n//           </button>\n//         </div>\n//       </form>\n//     </article>\n//   );\n// };\n\n// /* Add in autocomplete for courses and classification */\n\n// export default AccountSettings;\n\n//   // Load the saved profile picture from localStorage when the component mounts\n//   // useEffect(() => {\n//   //   const savedImage = localStorage.getItem('profilePic');\n//   //   if (savedImage) {\n//   //     setImage(savedImage); // If there's a saved image, set it to state\n//   //   }\n//   // }, []);\n\n//   // const handleImageChange = (e) => {\n//   //   const file = e.target.files[0];\n//   //   if (file) {\n//   //     setFormData((prevData) => ({\n//   //       ...prevData,\n//   //       profileImage: file\n//   //     }));\n//   //     // const imageUrl = URL.createObjectURL(file); // Create a temporary URL for the image\n//   //     // localStorage.setItem('profilePic', imageUrl); // Store the image URL in localStorage\n//   //   }\n//   // };\nvar _c;\n$RefreshReg$(_c, \"AccountSettings\");","map":{"version":3,"names":["React","useState","useEffect","defaultprofilepic","cat","duck","pig","raccoon","raccoonwsunglasses","sleepingdog","tomnook","yellowduck","sittingcat","sittingbear","madsquirrel","goat","jsxDEV","_jsxDEV","presetProfilePics","courseList","interestList","AccountSettings","_s","formData","setFormData","storedSettings","localStorage","getItem","storedUser","JSON","parse","parsedUser","first_name","last_name","phonenumber","email","courses","classification","description","username","password","profileImageUrl","interests","lastName","phoneNumber","setItem","stringify","window","dispatchEvent","Event","handleChange","e","name","value","type","selectedOptions","target","selectedValues","Array","from","map","option","handlePresetImageSelect","imageUrl","handleSubmit","preventDefault","console","log","alert","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","required","multiple","course","interest","placeholder","src","alt","index","onClick","_c","$RefreshReg$"],"sources":["/Users/hesanders23/Desktop/Study-Buddy-Web-App/frontend/src/pages/accountsettings/accountsettings.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./accountsettings.css\";\nimport defaultprofilepic from \"../../assets/defaultPfP.png\"; // Fallback\nimport cat from \"../../assets/acnhpfps/cat.jpeg\";\nimport duck from \"../../assets/acnhpfps/duck.jpeg\";\nimport pig from \"../../assets/acnhpfps/pig.jpeg\";\nimport raccoon from \"../../assets/acnhpfps/raccoon.jpeg\";\nimport raccoonwsunglasses from \"../../assets/acnhpfps/raccoonwsunglasses.jpeg\";\nimport sleepingdog from \"../../assets/acnhpfps/sleepingdog.jpeg\";\nimport tomnook from \"../../assets/acnhpfps/tomnook.jpeg\";\nimport yellowduck from \"../../assets/acnhpfps/yellowduck.jpeg\";\nimport sittingcat from \"../../assets/acnhpfps/sittingcat.jpeg\";\nimport sittingbear from \"../../assets/acnhpfps/sittingbear.jpeg\";\nimport madsquirrel from \"../../assets/acnhpfps/madsquirrel.jpeg\";\nimport goat from \"../../assets/acnhpfps/goat.jpeg\";\n\nconst presetProfilePics = [\n  cat,\n  duck,\n  pig,\n  raccoon,\n  raccoonwsunglasses,\n  sleepingdog,\n  tomnook,\n  yellowduck,\n  goat,\n  sittingcat,\n  sittingbear,\n  madsquirrel\n];\n\nconst courseList = [\"Mathematics\", \"Computer Science\", \"Physics\", \"Chemistry\", \"Biology\", \"Engineering\", \"History\", \"Literature\", \"Art\", \"Music\"];\nconst interestList = [\"Reading\", \"Hiking\", \"Gaming\", \"Crochet\", \"Coding\", \"Painting\", \"Photography\", \"Sports\", \"Movies\", \"Music\", \"Travel\"];\n\nconst AccountSettings = () => {\n  const [formData, setFormData] = useState(() => {\n    const storedSettings = localStorage.getItem('accountSettingsData');\n    const storedUser = localStorage.getItem('currentUser'); // Retrieve signup data\n\n    if (storedSettings) {\n      return JSON.parse(storedSettings);\n    } else if (storedUser) {\n      // If no previous settings, pre-fill with signup data\n      const parsedUser = JSON.parse(storedUser);\n      // Assuming your signup data has these fields: username, first_name, last_name, email\n      return {\n        first_name: parsedUser.first_name || \"\",\n        last_name: parsedUser.last_name || \"\",\n        phonenumber: \"\", // No phone number in signup\n        email: parsedUser.email || \"\",\n        courses: [], // Not collected during signup\n        classification: \"\", // Not collected during signup\n        description: \"\", // Not collected during signup\n        username: parsedUser.username || \"\",\n        password: \"\", // Don't pre-fill password for security\n        profileImageUrl: \"\", // Not collected during signup\n        interests: [] // Not collected during signup\n      };\n    } else {\n      return {\n        first_name: \"\", lastName: \"\", phoneNumber: \"\", email: \"\", courses: [],\n        classification: \"\", description: \"\", username: \"\", password: \"\", profileImageUrl: \"\",\n        interests: []\n      };\n    }\n  // const [formData, setFormData] = useState(() => {\n  //   const storedData = localStorage.getItem('accountSettingsData');\n  //   if (storedData) {\n  //     return JSON.parse(storedData);\n  //   } else {\n  //     return {\n  //       first_name: \"\",\n  //       last_name: \"\",\n  //       phonenumber: \"\",\n  //       email: \"\",\n  //       courses: \"\",\n  //       classification: \"\",\n  //       description: \"\",\n  //       username: \"\",\n  //       password: \"\",\n  //       profileImageUrl: \"\"\n  //     };\n  //   }\n  });\n\n  useEffect(() => {\n    localStorage.setItem('accountSettingsData', JSON.stringify(formData));\n    window.dispatchEvent(new Event('profilePictureUpdated')); // Dispatch custom event\n  }, [formData.profileImageUrl]);\n\n  useEffect(() => {\n    localStorage.setItem('accountSettingsData', JSON.stringify(formData));\n  }, [formData]);\n\n  const handleChange = (e) => {\n    const { name, value, type, selectedOptions } = e.target;\n    setFormData({ ...formData, [name]: value });\n\n    if (type === 'select-multiple') {\n      const selectedValues = Array.from(selectedOptions).map(option => option.value);\n      setFormData({ ...formData, [name]: selectedValues });\n    } else {\n      setFormData({ ...formData, [name]: value });\n    }\n  };\n\n  const handlePresetImageSelect = (imageUrl) => {\n    setFormData({ ...formData, profileImageUrl: imageUrl });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"Account settings saved to local storage:\", formData);\n    alert(\"Account settings saved!\"); // Change to a pop-up alert\n  };\n\n  return (\n    <article className=\"settingsContainer\">\n      <h1 id=\"astitle\">Account Settings</h1>\n\n      <form onSubmit={handleSubmit} className=\"settingsInfo\">\n        <div className=\"mainInfo\">\n          <div className=\"entryarea\">\n            <span>First Name</span>\n            <input type=\"text\" name=\"first_name\" value={formData.first_name} onChange={handleChange} required />\n          </div>\n\n          <div className=\"entryarea\">\n            <span>Last Name</span>\n            <input type=\"text\" name=\"last_name\" value={formData.last_name} onChange={handleChange} required />\n          </div>\n\n          <div className=\"entryarea\">\n            <span>Phone Number</span>\n            <input type=\"text\" name=\"phonenumber\" value={formData.phonenumber} onChange={handleChange} />\n          </div>\n\n          <div className=\"entryarea\">\n            <span>Email</span>\n            <input type=\"text\" name=\"email\" value={formData.email} onChange={handleChange} required />\n          </div>\n\n          <div className=\"entryarea\">\n            <span>Courses</span>\n            <select\n              name=\"courses\"\n              multiple\n              value={formData.courses}\n              onChange={handleChange}\n              className=\"multi-select-dropdown\"\n            >\n              {courseList.map((course) => (\n                <option key={course} value={course}>\n                  {course}\n                </option>\n              ))}\n            </select>\n            {/* <input type=\"text\" name=\"courses\" value={formData.courses} onChange={handleChange} /> */}\n            \n          </div>\n\n          <div className=\"entryarea\">\n            <span>Interests</span>\n            {/* <input type=\"text\" name=\"interests\" value={formData.interests} onChange={handleChange} /> */}\n            <select\n              name=\"interests\"\n              multiple\n              value={formData.interests}\n              onChange={handleChange}\n              className=\"multi-select-dropdown\"\n            >\n              {interestList.map((interest) => (\n                <option key={interest} value={interest}>\n                  {interest}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          \n\n          <div className=\"entryarea\">\n            <span>Classification</span>\n            <input type=\"text\" name=\"classification\" value={formData.classification} onChange={handleChange} required />\n          </div>\n\n          <div className=\"entryarea\">\n            <span>Bio</span>\n            <input type=\"text\" name=\"description\" placeholder=\"Tell us about you!\" value={formData.description} onChange={handleChange} required />\n          </div>\n        </div>\n\n        <div className=\"otherInfo\">\n          <div className=\"entryarea\">\n            <span className=\"aspfpSpan\">Choose Profile Picture</span>\n                   {/* Display the selected profile picture */}\n              {formData.profileImageUrl && (\n                <div className=\"asProfilePic\">\n                  <img src={formData.profileImageUrl || defaultprofilepic} alt=\"Selected Profile\" \n                  className=\"asprofile-image\" />\n                </div>\n                    )}\n\n              <div className=\"preset-image-options\">\n                {presetProfilePics.map((imageUrl, index) => (\n                  <div\n                    key={index}\n                    className={`preset-image-container ${formData.profileImageUrl === imageUrl ? 'selected' : ''}`}\n                    onClick={() => handlePresetImageSelect(imageUrl)}\n                  >\n                    <img src={imageUrl} alt={`Preset Avatar ${index + 1}`} className=\"preset-image\" />\n                  </div>\n                ))}\n              </div> \n\n          </div>\n\n          <div className=\"entryarea\">\n            <span>Username</span>\n            <input type=\"text\" name=\"username\" value={formData.username} onChange={handleChange} required />\n          </div>\n\n          <div className=\"entryarea\">\n            <span>Password</span>\n            <input type=\"text\" name=\"password\" value={formData.password} onChange={handleChange} required />\n          </div>\n        </div>\n\n        <div id=\"sEButton\">\n          <button type=\"submit\" id=\"saveEdits\">\n            Save Edits\n          </button>\n        </div>\n      </form>\n    </article>\n  );\n};\n\nexport default AccountSettings;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./accountsettings.css\"\n// import defaultprofilepic from \"../../assets/defaultPfP.png\";\n// import axios from 'axios';\n\n// const AccountSettings = () => {\n//   const [formData, setFormData] = useState({\n//     first_name: \"\", \n//     last_name: \"\",\n//     phone_number: \"\",\n//     email: \"\",\n//     classification: \"\", //courses: \"\", // might need to handle this differently if it's an array on the backend\n//     //profile_image: null, // For file upload\n//     description: \"\",\n//     username: \"\", // might add this later\n//     password: \"\"\n//   });\n\n//   const token = localStorage.getItem('authToken'); //where I'm storing the token that the user was assigned at sign up\n//   const baseURL = 'http://localhost:10000/api';\n\n\n//   useEffect(() => {\n    \n//     const storedData = localStorage.getItem('accountSettingsData');\n//     if (storedData) {\n//       setFormData(JSON.parse(storedData));\n//     } else {\n//       // If no data in local storage, fetch from the server\n//       const fetchUserSettings = async () => { //grabbing the users previous account settings\n//         if (!token) { //if the user does not have a token/user id\n//           console.log(\"Token not found\");\n//           return;\n//         }\n//         else {\n//           console.log(\"Token found:\", token);\n//         }\n\n//         try {\n//           const response = await axios.get(`${baseURL}/accountsettings`, { //\n//             headers: {\n//               Authorization: `Bearer ${token}`,\n//             },\n//           });\n//           console.log(\"Posted to database:\", response.data);\n//           setFormData((prevData) => ({\n//             ...prevData,\n//             first_name: response.data.first_name || \"\",\n//             last_name: response.data.last_name || \"\",\n//             phone_number: response.data.phone_number || \"\",\n//             email: response.data.email || \"\",\n//             classification: response.data.classification || \"\",\n//             //courses: response.data.courses || \"\", // Adjust if backend sends courses as an array\n//             description: response.data.description || \"\", // Assuming 'description' in backend is bio\n//             //profile_image: response.data.profile_image || null, // Set existing profile image URL\n//             username: response.data.username || \"\",\n//             password: response.data.password || \"\"\n//           }));\n\n//         } catch (error) {\n//           console.error(\"Error fetching account settings:\", error);\n//         }\n//       };\n//     fetchUserSettings();\n//     }\n//   }, [token, baseURL]);\n\n//   // Save formData to local storage whenever it changes\n//   useEffect(() => {\n//     localStorage.setItem('accountSettingsData', JSON.stringify(formData));\n//   }, [formData]);\n\n\n//   // Handle Input Changes\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//     //console.log(\"formData after change:\", formData); \n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!token) {\n//       console.log(\"Token not found\");\n//       return;\n//     }\n//     else {\n//       console.log(\"Token found:\", token);\n//     }\n\n//     const formDataToSend = new FormData();\n//     for (const key in formData) {\n//       formDataToSend.append(key, formData[key]);\n//     }\n//     console.log(\"formData being sent:\", formData);\n\n//     try {\n//       const response = await axios.put(`${baseURL}/accountsettings`, formData, {\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           'Content-Type': 'multipart/form-data',\n//         },\n//       }\n//       );\n//       console.log(\"Account settings updated successfully:\", response.data);\n//       // localStorage.removeItem('accountSettingsData');\n//     } catch (error) {\n//       console.error(\"Error updating account settings:\", error);\n//     }\n//   };\n\n//   // const handleImageChange = (event) => {\n//   //   console.log(\"file to upload:\", event.target.files[0]);\n//   //   const file = event.target.files[0];\n//   //   if (file) {\n//   //     const reader = new FileReader();\n//   //     reader.onloadend = () => {\n//   //       setFormData({ ...formData, profile_image: reader.result }); // Store as binary data\n//   //     };\n//   //     reader.readAsArrayBuffer(file);\n//   //     //reader.readAsBinaryString(file); // Or reader.readAsArrayBuffer(file)\n//   //   } else {\n//   //     setFormData({ ...formData, profile_image: null });\n//   //   }\n//   // };\n\n\n//   return (\n//     <article className=\"settingsContainer\">\n//       <h1 id=\"astitle\">Account Settings</h1>\n\n//       <form onSubmit={handleSubmit} className=\"settingsInfo\">\n//         <div className=\"mainInfo\">\n//           <div className=\"entryarea\">\n//             <span>First Name</span>\n//             <input type=\"text\" name=\"first_name\" value={formData.first_name} onChange={handleChange} required />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Last Name</span>\n//             <input type=\"text\" name=\"last_name\" value={formData.last_name} onChange={handleChange} required />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Phone Number</span>\n//             <input type=\"text\" name=\"phone_number\" value={formData.phone_number} onChange={handleChange} />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Email</span>\n//             <input type=\"text\" name=\"email\" value={formData.email} onChange={handleChange} required />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Courses</span>\n//             <input type=\"text\" name=\"courses\" value={formData.courses} onChange={handleChange} />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Classification</span>\n//             <input type=\"text\" name=\"classification\" value={formData.classification} onChange={handleChange} required />\n//           </div>\n\n//         </div>\n\n//         <div className=\"otherInfo\">\n//           <div className=\"entryarea\">\n//             <span className=\"aspfpSpan\">Edit Profile Picture</span>\n\n//               <input \n//                 type=\"file\"\n//                 name=\"profile_image\"\n//                 accept= \".jpeg, .png, .jpg\"  //\"image/*\" //accept=\".jpeg, .png\"\n//                 //onChange={handleImageChange}\n//                 className=\"asProfileUpload\" \n//                 id=\"profilePicUpload\"\n//               />\n\n//               <label htmlFor=\"profilePicUpload\">\n//                   <div className=\"asProfilePic\">\n//                     <img \n//                     src={/*formData.profile_image ||*/ defaultprofilepic} //{profileImage || defaultprofilepic} \n//                     alt=\"Profile\" \n//                     className=\"asprofile-image\" />\n//                   </div>\n//               </label>\n\n\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Bio</span>\n//             <input type=\"text\" name=\"description\" placeholder=\"Tell us about you! What are your interests, activities, favorites?\" value={formData.description} onChange={handleChange} required />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Username</span>\n//             <input type=\"text\" name=\"username\" value={formData.username} onChange={handleChange} required />\n//           </div>\n\n//           <div className=\"entryarea\">\n//             <span>Password</span>\n//             <input type=\"text\" name=\"password\" value={formData.password} onChange={handleChange} required />\n//           </div>\n          \n//         </div>\n\n//         <div id=\"sEButton\">\n//           <button type=\"submit\" id=\"saveEdits\">\n//             Save Edits\n//           </button>\n//         </div>\n//       </form>\n//     </article>\n//   );\n// };\n\n// /* Add in autocomplete for courses and classification */\n\n// export default AccountSettings;\n\n\n//   // Load the saved profile picture from localStorage when the component mounts\n//   // useEffect(() => {\n//   //   const savedImage = localStorage.getItem('profilePic');\n//   //   if (savedImage) {\n//   //     setImage(savedImage); // If there's a saved image, set it to state\n//   //   }\n//   // }, []);\n\n//   // const handleImageChange = (e) => {\n//   //   const file = e.target.files[0];\n//   //   if (file) {\n//   //     setFormData((prevData) => ({\n//   //       ...prevData,\n//   //       profileImage: file\n//   //     }));\n//   //     // const imageUrl = URL.createObjectURL(file); // Create a temporary URL for the image\n//   //     // localStorage.setItem('profilePic', imageUrl); // Store the image URL in localStorage\n//   //   }\n//   // };"],"mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAkE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}